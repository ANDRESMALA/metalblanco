/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelo;

import dao.ClientesDao;
import dao.ComunaDao;
import dao.CotizacionDao;
import dao.DetalleCotizacionDao;
import dao.LineaTemporalDao;
import dao.ProductosDao;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import metalblanco.map.com.Cliente;
import metalblanco.map.com.Comuna;
import metalblanco.map.com.Cotizacion;
import metalblanco.map.com.DetalleDeCotizacion;
import metalblanco.map.com.DetalleTempCot;
import metalblanco.map.com.Productos;

/**
 *
 * @author andresmalagueno
 */
public class BussinesModelModCotizacion implements Serializable{
    
    
    private CotizacionDao cot = new CotizacionDao();
    private Validadores validador=new Validadores();
    Cotizacion cotizacion=new Cotizacion();
    DetalleCotizacionDao dtc=new DetalleCotizacionDao();
    private DetalleDeCotizacion midetalle=new DetalleDeCotizacion ();
    private LineaTemporalDao ltd=new  LineaTemporalDao();
    private List<DetalleTempCot> listatemporal=null;
    private Comuna comuna=new Comuna();
    private Cliente cliente=new Cliente();
    private ClientesDao cli=new ClientesDao();
    private ComunaDao com=new ComunaDao();
    private Productos producto=new Productos();
    private ProductosDao pro=new ProductosDao();
    private DetalleTempCot detalleTemp=new DetalleTempCot();
    private CalcularSubtotal subt=new CalcularSubtotal();
    private DetalleCotizacionDao detDao=new DetalleCotizacionDao();
    Cotizacion cotizacion2=new Cotizacion();
    public BussinesModelModCotizacion() {
    }
    
    
    public Cotizacion traerCotizacion(String numcot){
        
        if(validador.isInt(numcot)==true){
           int numcotizacion=Integer.parseInt(numcot);
            cotizacion=cot.buscarCotizacion(numcotizacion);
           
         }
        return cotizacion;
    
    }
    
    public void traspasarDetCotaTemporal(Cotizacion cot){
        
        for(DetalleDeCotizacion det:detDao.findAlldetCot(cot.getNumCotizacion())){
           
            DetalleTempCot detalleTemp=new DetalleTempCot();
            
            detalleTemp.setCodProducto(det.getCodProducto());
            detalleTemp.setDescripcion(det.getDescripcion());
            detalleTemp.setCantidad(det.getCantidad());
            detalleTemp.setValorUnitario(det.getValorUnitario());
            detalleTemp.setDescuento(det.getDescuento());
            detalleTemp.setSubtotal(det.getSubtotal());
            ltd.init();
            ltd.insertar(detalleTemp);
            ltd.close();
        }
        
           
    }
    
    
      public List<DetalleTempCot> traerListaDetTemp(){
        ltd.init();
        listatemporal=ltd.findAlldetCotTemp();
        ltd.close();
        
        
        
        return listatemporal;
        
        
    
    }
      
      public void eliminardetTemp(){
          
          ltd.eliminarTodo();
      
      }
    
      public Cliente traerCliente(String rutCliente){
        
 
            cliente=cli.buscarCliente(rutCliente);
     
        return cliente;
        
      }
      
      public Productos traerProducto(String productos){
        
        producto=pro.buscarProducto(productos);
        return producto;
        
      }
      
      
      public void ingresarLinea(String codigo,String descripcion,String Cantidad,Double precio,Double descuento,Double subtotal){
        
            detalleTemp.setCodProducto(codigo);
            detalleTemp.setDescripcion(descripcion);
            detalleTemp.setCantidad(Integer.parseInt(Cantidad));
            detalleTemp.setValorUnitario(precio);
            detalleTemp.setDescuento(descuento);
            detalleTemp.setSubtotal(subtotal);
           
            if(ltd.validardet(detalleTemp.getCodProducto())==true){
                ltd.init();
                ltd.insertar(detalleTemp);
                ltd.close();
            
            
            }else if(ltd.validardet(detalleTemp.getCodProducto())==false){
        
                ltd.init();
                ltd.modificardET(detalleTemp);
                ltd.close();
        
            }
     }
      
       public Double calcularSubtotales(String cantidad,Double precio,Double descuento){
        
        CalcularSubtotal subt=new CalcularSubtotal();  
        Double subtotal=(subt.Calcular(precio,Integer.parseInt(cantidad),descuento));
        return subtotal;
        
    }
    
     public HashMap<String, Double> hacerCalculos(){
    
        HashMap<String, Double>  map = new HashMap();
        
        Double neto=ltd.sumatotal();
        Double iva=subt.iva(neto);
        Double total=subt.total(neto, iva);
        
        map.put("neto", neto);
        map.put("iva", iva);
        map.put("total", total);
        return map;
        
     }
     
     
     public void eliminarLinea(DetalleTempCot detalleTemp){
        ltd.init();
        ltd.eliminarLinea(detalleTemp.getIdDetTemCot());
        ltd.close();
        
    }
     
     
     
     public void addCotMod(HashMap map){
     
         
         
         cotizacion2.setNumCotizacion(Integer.parseInt(map.get("numcot").toString()));
         cotizacion2.setFecha((Date)map.get("fecha"));
         cotizacion2.setRutCliente(map.get("rut").toString());
         cotizacion2.setRazonSocial(map.get("razon").toString());
         cotizacion2.setDireccion(map.get("direccion").toString());
         cotizacion2.setTelefono(map.get("telefono").toString());
         cotizacion2.setEmail(map.get("email").toString());
         cotizacion2.setComuna(map.get("comuna").toString());
         cotizacion2.setCiudad(map.get("ciudad").toString());
         cotizacion2.setNomContacto(map.get("nomcont").toString());
//         cotizacion.setVendedor(map.get("vendedor").toString());
         cotizacion2.setNeto(Double.parseDouble(map.get("neto").toString()));
         cotizacion2.setIva(Double.parseDouble(map.get("iva").toString()));
         cotizacion2.setTotal(Double.parseDouble(map.get("total").toString()));
         cot.init();
         cot.modificarCot(cotizacion2);
         cot.close();
         detDao.init();
         detDao.eliminarselectos(cotizacion2.getNumCotizacion());
         detDao.close();
         listatemporal=null;
         

     
     }
     
     public void rec(List<DetalleTempCot> listatemporal2 ){
     
     for( DetalleTempCot detalletem:listatemporal2 ){

                DetalleDeCotizacion midetalle=new DetalleDeCotizacion ();
                midetalle.setCOTIZACIONnumcotizacion(cotizacion2);
                midetalle.setCodProducto(detalletem.getCodProducto());
                midetalle.setDescripcion(detalletem.getDescripcion());
                midetalle.setCantidad(detalletem.getCantidad());
                midetalle.setValorUnitario(detalletem.getValorUnitario());
                midetalle.setDescuento(detalletem.getDescuento());
                midetalle.setSubtotal(detalletem.getSubtotal());
                detDao.init();
                detDao.insertar(midetalle);
                detDao.close();
            
        }
     
     }
     
     
    
}
